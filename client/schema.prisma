model company {
  id               Int      @id @default(autoincrement())
  latitude         Decimal  @db.Decimal(10, 8)
  longitude        Decimal  @db.Decimal(11, 8)
  created_at       DateTime @default(now()) @db.DateTime(0)
  updated_at       DateTime @updatedAt @db.DateTime(0)
  tolerance_active Boolean? @default(false)
  tolerance_time   Int      @default(30)
}

model DayOffRequest {
  id             Int          @id @default(autoincrement())
  userId         Int
  requestDate    DateTime
  leaveType      String
  status         DayOffStatus @default(pending)
  comment        String?
  leaveStartDate DateTime
  leaveEndDate   DateTime
  user           users        @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt

  @@map("dayoffrequest")
}

enum DayOffStatus {
  approved
  pending
  rejected
}

model DrinkAndFoodCost {
  id          Int                      @id @default(autoincrement())
  category    DrinkAndFoodCostCategory
  amount      Int
  cost        Int
  description String?
  date        DateTime
  createdAt   DateTime                 @default(now()) @map("created_at")
  updatedAt   DateTime                 @default(now()) @updatedAt @map("updated_at")
}

enum DrinkAndFoodCostCategory {
  drink
  food
}

model holidays {
  id         Int      @id @default(autoincrement())
  date       DateTime @db.DateTime(0)
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(0)
  updated_at DateTime @updatedAt @db.DateTime(0)
}

model job_positions {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  shift_start String   @db.VarChar(255)
  shift_end   String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.DateTime(0)
  updated_at  DateTime @updatedAt @db.DateTime(0)
  work_day    String?  @default("1,2,3,4,5") @db.VarChar(255)
  salary      Int
  users       users[]
}

model logs {
  id                  Int       @id @default(autoincrement())
  type                logs_type @default(work_from_office)
  user_id             Int?
  date                DateTime? @db.Date
  clock_in_time       DateTime? @db.Time(0)
  clock_in_latitude   Decimal?  @db.Decimal(10, 8)
  clock_in_longitude  Decimal?  @db.Decimal(11, 8)
  created_at          DateTime  @default(now()) @db.DateTime(0)
  updated_at          DateTime  @updatedAt @db.DateTime(0)
  work                Json?     @db.Json
  clock_out_time      DateTime? @db.Time(0)
  clock_out_latitude  Decimal?  @db.Decimal(10, 8)
  clock_out_longitude Decimal?  @db.Decimal(11, 8)
  user                users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "logs_ibfk_1")
  isOverTime          Boolean   @default(false)
  afterHourOvertime   Boolean   @default(false)
  clock_in_picture    String?
  clock_out_picture   String?

  @@index([user_id], map: "user_id")
}

enum logs_type {
  work_from_home        @map("work-from-home")
  sick
  work_from_office      @map("work-from-office")
  special_attendance    @map("special-attendance")
  on_site_work
  non_schedule_overtime
}

model Project {
  id             Int               @id @default(autoincrement())
  fund           Int
  title          String
  status         ProjectStatus     @default(pending)
  priority       Priority
  projectLeadId  Int
  projectLead    users             @relation(fields: [projectLeadId], references: [id], name: "Leader")
  projectMembers users[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  activity       ProjectActivity[]
  histories      ProjectHistory[]
  spendings      ProjectSpending[]

  @@map("projects")
}

model ProjectActivity {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id])
  userId      Int      @map("user_id")
  user        users    @relation(fields: [userId], references: [id])
  dateTime    DateTime @map("date_time")
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("projects_activity")
}

model ProjectHistory {
  id          Int      @id @default(autoincrement())
  projectId   Int      @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id])
  userId      Int      @map("user_id")
  user        users    @relation(fields: [userId], references: [id])
  dateTime    DateTime @map("date_time")
  description String
  file        String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("project_histories")
}

model ProjectSpending {
  id          Int          @id @default(autoincrement())
  projectId   Int          @map("project_id")
  project     Project      @relation(fields: [projectId], references: [id])
  userId      Int          @map("user_id")
  user        users        @relation(fields: [userId], references: [id])
  type        SpendingType
  amount      Int
  description String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  @@map("project_spendings")
}

enum SpendingType {
  food
  transportation
  lodging
  entertainment
}

enum ProjectStatus {
  in_progress
  pending
  completed
}

enum Priority {
  low
  normal
  high
  urgent
}

model timelines {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(255)
  description String         @db.Text
  type        timelines_type
  created_at  DateTime       @default(now()) @db.DateTime(0)
  updated_at  DateTime       @updatedAt @db.DateTime(0)
}

enum timelines_type {
  changed
  removed
  new
  updated
}

model users {
  id               Int               @id @default(autoincrement())
  name             String?           @db.VarChar(255)
  password         String?           @db.VarChar(255)
  work_id          String?           @db.VarChar(255)
  created_at       DateTime          @default(now()) @db.DateTime(0)
  updated_at       DateTime          @updatedAt @db.DateTime(0)
  role             users_role        @default(intern)
  job_position_id  Int?
  home_latitude    Decimal?          @db.Decimal(10, 8)
  home_longitude   Decimal?          @db.Decimal(11, 8)
  gender           users_gender?     @default(male)
  profile_picture  String?           @db.VarChar(255)
  logs             logs[]
  job_position     job_positions?    @relation(fields: [job_position_id], references: [id], map: "users_job_position_id_foreign_idx")
  dayOffRequests   DayOffRequest[]
  projectsLed      Project[]         @relation(name: "Leader")
  projectsMembered Project[]
  projectActivity  ProjectActivity[]
  projectHistories ProjectHistory[]
  projectSpendings ProjectSpending[]

  @@index([job_position_id], map: "users_job_position_id_foreign_idx")
}

enum users_role {
  admin
  employee
  intern
  ex_employee
  ex_intern
}

enum users_gender {
  male
  female
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.0.x"]
  previewFeatures = ["prismaSchemaFolder"]
  output          = "./../client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
