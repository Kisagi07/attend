generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model company {
  id               Int      @id @default(autoincrement())
  latitude         Decimal  @db.Decimal(10, 8)
  longitude        Decimal  @db.Decimal(11, 8)
  created_at       DateTime @db.DateTime(0) @default(now())
  updated_at       DateTime @db.DateTime(0) @updatedAt
  tolerance_active Boolean? @default(false)
  tolerance_time   Int      @default(30)
}

model holidays {
  id         Int      @id @default(autoincrement())
  date       DateTime @db.DateTime(0)
  name       String   @db.VarChar(255)
  created_at DateTime @db.DateTime(0) @default(now())
  updated_at DateTime @db.DateTime(0) @updatedAt
}

model job_positions {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  shift_start String   @db.VarChar(255)
  shift_end   String   @db.VarChar(255)
  created_at  DateTime @db.DateTime(0) @default(now())
  updated_at  DateTime @db.DateTime(0) @updatedAt
  work_day    String?  @default("1,2,3,4,5") @db.VarChar(255)
  salary      Int
  users       users[]
}

model logs {
  id                  Int       @id @default(autoincrement())
  type                logs_type @default(work_from_office)
  user_id             Int?
  date                DateTime? @db.Date @default(now())
  clock_in_time       DateTime? @db.Time(0)
  clock_in_latitude   Decimal?  @db.Decimal(10, 8)
  clock_in_longitude  Decimal?  @db.Decimal(11, 8)
  created_at          DateTime  @db.DateTime(0) @default(now())
  updated_at          DateTime  @db.DateTime(0) @updatedAt
  work                String?   @db.LongText
  clock_out_time      DateTime? @db.Time(0)
  clock_out_latitude  Decimal?  @db.Decimal(10, 8)
  clock_out_longitude Decimal?  @db.Decimal(11, 8)
  user               users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "logs_ibfk_1")

  @@index([user_id], map: "user_id")
}

model sequelizemeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

model timelines {
  id          Int            @id @default(autoincrement())
  title       String         @db.VarChar(255)
  description String         @db.Text
  type        timelines_type
  created_at  DateTime       @db.DateTime(0) @default(now())
  updated_at  DateTime       @db.DateTime(0) @updatedAt
}

model users {
  id               Int            @id @default(autoincrement())
  name             String?        @db.VarChar(255)
  password         String?        @db.VarChar(255)
  work_id          String?        @db.VarChar(255)
  created_at       DateTime       @db.DateTime(0) @default(now())
  updated_at       DateTime       @db.DateTime(0) @updatedAt
  role             users_role     @default(intern)
  tolerance_active Boolean?       @default(false)
  tolerance_time   Int            @default(30)
  job_position_id  Int?
  home_latitude    Decimal?       @db.Decimal(10, 8)
  home_longitude   Decimal?       @db.Decimal(11, 8)
  gender           users_gender?  @default(male)
  logs             logs[]
  job_position    job_positions? @relation(fields: [job_position_id], references: [id], map: "users_job_position_id_foreign_idx")

  @@index([job_position_id], map: "users_job_position_id_foreign_idx")
}

enum logs_type {
  work_from_home   @map("work-from-home")
  sick
  work_from_office @map("work-from-office")
}

enum timelines_type {
  changed
  removed
  new
  updated
}

enum users_role {
  admin
  employee
  intern
}

enum users_gender {
  male
  female
}
